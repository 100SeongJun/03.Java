[학습]
1. Enum(Enumeration) 열거형 상수 집합 (step01)
	- 클래스를 상수처럼 사용가능
	public final static type 변수명 = value; (상수 형태)

	- 내부 메소드
		- value() - 상수값을 배열 형태로 반환
		- valueOf(String str) - str과 일치하는 인스턴스 반환
		- ordinal - 인덱스 반환


	클래스가 많아지는것을 방지
	상속ㅇㅣ `~~
	다형성에 대한 문제도 막을 수 있음
	-예시 
		- 데이터를 타입별로 그룹화
			PASS(true,"1","Y")
			FAIL(false,"0","N")
			
			-타입에 따른 연산ㅅ기 필요
			ORIGIN("판매금액",origin->origin),
			SUPPLY("공급액",origin ->Math.round(origin,doubleValue()/11) ..


2. InnerClass (step02)
	#### 내용정리 안해도 됨 개념만 이해하고 코드만 읽을 줄 알면 됨!!!
	- 외부클래스 내부에 클래스가 있는 형태로 내부 클래스에선 static을 사용할 수 없음
	- 
	Anonymous class	(LocalAnonymousInnerTest.java)
		- 
		
3. Lambda (함수형 프로그래밍, 람다식) (step03)
	- 함수형 프로그래밍 : 순수 함수(매개 변수만을 사용하여 만드는 함수)를 구현 및 호출함으로 외부에 부수적인 영향을 주지 않도록
									 구현하는 방식
		- 함수 내부에서 함수 외부에 있는 변수를 사용하지 않는다는 의미 내포!
	
		- 하나의 함수형 인터페이스에는 하나의 메소드만 정의되어있어야함. !!
			- 컴파일 과정에서 컴퓨터가 어떤 것을 구현해야하는지 모호함. 
			- 매개변수의 개수가 달라도 애초에 발생할 수 있는 오류를 방지하기 위해 에러를 발생시킴
		@FunctionalInterface  : 함수형 인터페이스 어노테이션
		

4. Optional(step04)
	- Null 혹은 Nullable한 값을 저장할 때 Wrapper 클래스
	- 참조하여도 NPE(NullPointerError)이 발생하지 않도록 처리
	
	- 가이드라인 (언제쓰면좋은지)
		- Optional에 Null을 직접 할당하지 말 것
		- 단순히 값을 얻으려고 한다면 Optional 사용에 대한 고려 필수
		- 생성자, 메소드 파라미터 등으로 Optional 사용은 하지말 것	
		- Collection의 경우에는 차라리 빈 Collection을 넘겨줄 것	 		 
	
5. Stream
	- 배열이나 Collection 저장 요소를 하나씩 참조해서 람다식으로 처리 할 수 있도록 해주는 반복자
	- 구조 및 사용법
		- step01 : Stream 생성
		- step02 : 중개연산, Filtering, Mapping 등으로 원하는 결과를 만드는 중간 과정
 		- step03 : 최종 연산, 최종적으로 결과를 만드는 과정
 		
	
	
	
	
	